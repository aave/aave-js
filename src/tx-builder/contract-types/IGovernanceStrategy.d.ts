/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IGovernanceStrategyInterface extends ethers.utils.Interface {
  functions: {
    "AAVE()": FunctionFragment;
    "STK_AAVE()": FunctionFragment;
    "getPropositionPowerAt(address,uint256)": FunctionFragment;
    "getTotalPropositionSupplyAt(uint256)": FunctionFragment;
    "getTotalVotingSupplyAt(uint256)": FunctionFragment;
    "getVotingPowerAt(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "AAVE", values?: undefined): string;
  encodeFunctionData(functionFragment: "STK_AAVE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPropositionPowerAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPropositionSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalVotingSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingPowerAt",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "AAVE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "STK_AAVE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPropositionPowerAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPropositionSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalVotingSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingPowerAt",
    data: BytesLike
  ): Result;

  events: {};
}

export class IGovernanceStrategy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IGovernanceStrategyInterface;

  functions: {
    AAVE(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "AAVE()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    STK_AAVE(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "STK_AAVE()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getPropositionPowerAt(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getPropositionPowerAt(address,uint256)"(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getTotalPropositionSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getTotalPropositionSupplyAt(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getTotalVotingSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getTotalVotingSupplyAt(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getVotingPowerAt(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getVotingPowerAt(address,uint256)"(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  AAVE(overrides?: CallOverrides): Promise<string>;

  "AAVE()"(overrides?: CallOverrides): Promise<string>;

  STK_AAVE(overrides?: CallOverrides): Promise<string>;

  "STK_AAVE()"(overrides?: CallOverrides): Promise<string>;

  getPropositionPowerAt(
    user: string,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPropositionPowerAt(address,uint256)"(
    user: string,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalPropositionSupplyAt(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTotalPropositionSupplyAt(uint256)"(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalVotingSupplyAt(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTotalVotingSupplyAt(uint256)"(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVotingPowerAt(
    user: string,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getVotingPowerAt(address,uint256)"(
    user: string,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    AAVE(overrides?: CallOverrides): Promise<string>;

    "AAVE()"(overrides?: CallOverrides): Promise<string>;

    STK_AAVE(overrides?: CallOverrides): Promise<string>;

    "STK_AAVE()"(overrides?: CallOverrides): Promise<string>;

    getPropositionPowerAt(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPropositionPowerAt(address,uint256)"(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPropositionSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalPropositionSupplyAt(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalVotingSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalVotingSupplyAt(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingPowerAt(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVotingPowerAt(address,uint256)"(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    AAVE(overrides?: CallOverrides): Promise<BigNumber>;

    "AAVE()"(overrides?: CallOverrides): Promise<BigNumber>;

    STK_AAVE(overrides?: CallOverrides): Promise<BigNumber>;

    "STK_AAVE()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPropositionPowerAt(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPropositionPowerAt(address,uint256)"(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPropositionSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalPropositionSupplyAt(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalVotingSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalVotingSupplyAt(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingPowerAt(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVotingPowerAt(address,uint256)"(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AAVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "AAVE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STK_AAVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "STK_AAVE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPropositionPowerAt(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPropositionPowerAt(address,uint256)"(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPropositionSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalPropositionSupplyAt(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalVotingSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalVotingSupplyAt(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingPowerAt(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVotingPowerAt(address,uint256)"(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
