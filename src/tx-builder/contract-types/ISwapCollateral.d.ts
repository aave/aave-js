/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ISwapCollateralInterface extends ethers.utils.Interface {
  functions: {
    "swapAndDeposit(address[],address[],uint256[],uint256[],tuple[],bool[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "swapAndDeposit",
    values: [
      string[],
      string[],
      BigNumberish[],
      BigNumberish[],
      {
        amount: BigNumberish;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
      boolean[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "swapAndDeposit",
    data: BytesLike
  ): Result;

  events: {};
}

export class ISwapCollateral extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ISwapCollateralInterface;

  functions: {
    swapAndDeposit(
      assetToSwapFromList: string[],
      assetToSwapToList: string[],
      amountToSwapList: BigNumberish[],
      minAmountsToReceive: BigNumberish[],
      permitParams: {
        amount: BigNumberish;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
      useEthPath: boolean[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapAndDeposit(address[],address[],uint256[],uint256[],tuple[],bool[])"(
      assetToSwapFromList: string[],
      assetToSwapToList: string[],
      amountToSwapList: BigNumberish[],
      minAmountsToReceive: BigNumberish[],
      permitParams: {
        amount: BigNumberish;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
      useEthPath: boolean[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  swapAndDeposit(
    assetToSwapFromList: string[],
    assetToSwapToList: string[],
    amountToSwapList: BigNumberish[],
    minAmountsToReceive: BigNumberish[],
    permitParams: {
      amount: BigNumberish;
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    }[],
    useEthPath: boolean[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapAndDeposit(address[],address[],uint256[],uint256[],tuple[],bool[])"(
    assetToSwapFromList: string[],
    assetToSwapToList: string[],
    amountToSwapList: BigNumberish[],
    minAmountsToReceive: BigNumberish[],
    permitParams: {
      amount: BigNumberish;
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    }[],
    useEthPath: boolean[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    swapAndDeposit(
      assetToSwapFromList: string[],
      assetToSwapToList: string[],
      amountToSwapList: BigNumberish[],
      minAmountsToReceive: BigNumberish[],
      permitParams: {
        amount: BigNumberish;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
      useEthPath: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    "swapAndDeposit(address[],address[],uint256[],uint256[],tuple[],bool[])"(
      assetToSwapFromList: string[],
      assetToSwapToList: string[],
      amountToSwapList: BigNumberish[],
      minAmountsToReceive: BigNumberish[],
      permitParams: {
        amount: BigNumberish;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
      useEthPath: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    swapAndDeposit(
      assetToSwapFromList: string[],
      assetToSwapToList: string[],
      amountToSwapList: BigNumberish[],
      minAmountsToReceive: BigNumberish[],
      permitParams: {
        amount: BigNumberish;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
      useEthPath: boolean[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapAndDeposit(address[],address[],uint256[],uint256[],tuple[],bool[])"(
      assetToSwapFromList: string[],
      assetToSwapToList: string[],
      amountToSwapList: BigNumberish[],
      minAmountsToReceive: BigNumberish[],
      permitParams: {
        amount: BigNumberish;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
      useEthPath: boolean[],
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    swapAndDeposit(
      assetToSwapFromList: string[],
      assetToSwapToList: string[],
      amountToSwapList: BigNumberish[],
      minAmountsToReceive: BigNumberish[],
      permitParams: {
        amount: BigNumberish;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
      useEthPath: boolean[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapAndDeposit(address[],address[],uint256[],uint256[],tuple[],bool[])"(
      assetToSwapFromList: string[],
      assetToSwapToList: string[],
      amountToSwapList: BigNumberish[],
      minAmountsToReceive: BigNumberish[],
      permitParams: {
        amount: BigNumberish;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
      useEthPath: boolean[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
