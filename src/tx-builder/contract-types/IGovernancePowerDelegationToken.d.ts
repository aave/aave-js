/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IGovernancePowerDelegationTokenInterface
  extends ethers.utils.Interface {
  functions: {
    "_nonces(address)": FunctionFragment;
    "delegate(address)": FunctionFragment;
    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "delegateByType(address,uint8)": FunctionFragment;
    "delegateByTypeBySig(address,uint8,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "getDelegateeByType(address,uint8)": FunctionFragment;
    "getPowerAtBlock(address,uint256,uint8)": FunctionFragment;
    "getPowerCurrent(address,uint8)": FunctionFragment;
    "totalSupplyAt(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_nonces", values: [string]): string;
  encodeFunctionData(functionFragment: "delegate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "delegateBySig",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateByType",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateByTypeBySig",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegateeByType",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPowerAtBlock",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPowerCurrent",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "_nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateByType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateByTypeBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegateeByType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPowerAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPowerCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;

  events: {
    "DelegateChanged(address,address,uint8)": EventFragment;
    "DelegatedPowerChanged(address,uint256,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelegateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegatedPowerChanged"): EventFragment;
}

export class IGovernancePowerDelegationToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IGovernancePowerDelegationTokenInterface;

  functions: {
    _nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "_nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    delegate(
      delegatee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "delegate(address)"(
      delegatee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    delegateByType(
      delegatee: string,
      delegationType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "delegateByType(address,uint8)"(
      delegatee: string,
      delegationType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    delegateByTypeBySig(
      delegatee: string,
      delegationType: BigNumberish,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "delegateByTypeBySig(address,uint8,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      delegationType: BigNumberish,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getDelegateeByType(
      delegator: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getDelegateeByType(address,uint8)"(
      delegator: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getPowerAtBlock(
      user: string,
      blockNumber: BigNumberish,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getPowerAtBlock(address,uint256,uint8)"(
      user: string,
      blockNumber: BigNumberish,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getPowerCurrent(
      user: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getPowerCurrent(address,uint8)"(
      user: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalSupplyAt(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  _nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "_nonces(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  delegate(
    delegatee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "delegate(address)"(
    delegatee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  delegateBySig(
    delegatee: string,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
    delegatee: string,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  delegateByType(
    delegatee: string,
    delegationType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "delegateByType(address,uint8)"(
    delegatee: string,
    delegationType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  delegateByTypeBySig(
    delegatee: string,
    delegationType: BigNumberish,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "delegateByTypeBySig(address,uint8,uint256,uint256,uint8,bytes32,bytes32)"(
    delegatee: string,
    delegationType: BigNumberish,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getDelegateeByType(
    delegator: string,
    delegationType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getDelegateeByType(address,uint8)"(
    delegator: string,
    delegationType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPowerAtBlock(
    user: string,
    blockNumber: BigNumberish,
    delegationType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPowerAtBlock(address,uint256,uint8)"(
    user: string,
    blockNumber: BigNumberish,
    delegationType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPowerCurrent(
    user: string,
    delegationType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPowerCurrent(address,uint8)"(
    user: string,
    delegationType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupplyAt(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalSupplyAt(uint256)"(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    _nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "_nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegate(delegatee: string, overrides?: CallOverrides): Promise<void>;

    "delegate(address)"(
      delegatee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateByType(
      delegatee: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "delegateByType(address,uint8)"(
      delegatee: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateByTypeBySig(
      delegatee: string,
      delegationType: BigNumberish,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "delegateByTypeBySig(address,uint8,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      delegationType: BigNumberish,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getDelegateeByType(
      delegator: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getDelegateeByType(address,uint8)"(
      delegator: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPowerAtBlock(
      user: string,
      blockNumber: BigNumberish,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPowerAtBlock(address,uint256,uint8)"(
      user: string,
      blockNumber: BigNumberish,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPowerCurrent(
      user: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPowerCurrent(address,uint8)"(
      user: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAt(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    DelegateChanged(
      delegator: string | null,
      delegatee: string | null,
      delegationType: null
    ): EventFilter;

    DelegatedPowerChanged(
      user: string | null,
      amount: null,
      delegationType: null
    ): EventFilter;
  };

  estimateGas: {
    _nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "_nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegate(delegatee: string, overrides?: Overrides): Promise<BigNumber>;

    "delegate(address)"(
      delegatee: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    delegateByType(
      delegatee: string,
      delegationType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "delegateByType(address,uint8)"(
      delegatee: string,
      delegationType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    delegateByTypeBySig(
      delegatee: string,
      delegationType: BigNumberish,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "delegateByTypeBySig(address,uint8,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      delegationType: BigNumberish,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getDelegateeByType(
      delegator: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDelegateeByType(address,uint8)"(
      delegator: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPowerAtBlock(
      user: string,
      blockNumber: BigNumberish,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPowerAtBlock(address,uint256,uint8)"(
      user: string,
      blockNumber: BigNumberish,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPowerCurrent(
      user: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPowerCurrent(address,uint8)"(
      user: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAt(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegate(
      delegatee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "delegate(address)"(
      delegatee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    delegateByType(
      delegatee: string,
      delegationType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "delegateByType(address,uint8)"(
      delegatee: string,
      delegationType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    delegateByTypeBySig(
      delegatee: string,
      delegationType: BigNumberish,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "delegateByTypeBySig(address,uint8,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      delegationType: BigNumberish,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getDelegateeByType(
      delegator: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDelegateeByType(address,uint8)"(
      delegator: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPowerAtBlock(
      user: string,
      blockNumber: BigNumberish,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPowerAtBlock(address,uint256,uint8)"(
      user: string,
      blockNumber: BigNumberish,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPowerCurrent(
      user: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPowerCurrent(address,uint8)"(
      user: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSupplyAt(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
