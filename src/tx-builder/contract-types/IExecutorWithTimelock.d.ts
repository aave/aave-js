/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IExecutorWithTimelockInterface extends ethers.utils.Interface {
  functions: {
    "GRACE_PERIOD()": FunctionFragment;
    "MAXIMUM_DELAY()": FunctionFragment;
    "MINIMUM_DELAY()": FunctionFragment;
    "cancelTransaction(address,uint256,string,bytes,uint256,bool)": FunctionFragment;
    "executeTransaction(address,uint256,string,bytes,uint256,bool)": FunctionFragment;
    "getAdmin()": FunctionFragment;
    "getDelay()": FunctionFragment;
    "getPendingAdmin()": FunctionFragment;
    "isActionQueued(bytes32)": FunctionFragment;
    "isProposalOverGracePeriod(address,uint256)": FunctionFragment;
    "queueTransaction(address,uint256,string,bytes,uint256,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "GRACE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAXIMUM_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTransaction",
    values: [string, BigNumberish, string, BytesLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [string, BigNumberish, string, BytesLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(functionFragment: "getDelay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isActionQueued",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isProposalOverGracePeriod",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queueTransaction",
    values: [string, BigNumberish, string, BytesLike, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "GRACE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAXIMUM_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDelay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActionQueued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProposalOverGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queueTransaction",
    data: BytesLike
  ): Result;

  events: {
    "CancelledAction(bytes32,address,uint256,string,bytes,uint256,bool)": EventFragment;
    "ExecutedAction(bytes32,address,uint256,string,bytes,uint256,bool,bytes)": EventFragment;
    "NewAdmin(address)": EventFragment;
    "NewDelay(uint256)": EventFragment;
    "NewPendingAdmin(address)": EventFragment;
    "QueuedAction(bytes32,address,uint256,string,bytes,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelledAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutedAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDelay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QueuedAction"): EventFragment;
}

export class IExecutorWithTimelock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IExecutorWithTimelockInterface;

  functions: {
    GRACE_PERIOD(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "GRACE_PERIOD()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MAXIMUM_DELAY(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "MAXIMUM_DELAY()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MINIMUM_DELAY(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "MINIMUM_DELAY()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    cancelTransaction(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      executionTime: BigNumberish,
      withDelegatecall: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelTransaction(address,uint256,string,bytes,uint256,bool)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      executionTime: BigNumberish,
      withDelegatecall: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeTransaction(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      executionTime: BigNumberish,
      withDelegatecall: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "executeTransaction(address,uint256,string,bytes,uint256,bool)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      executionTime: BigNumberish,
      withDelegatecall: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    getAdmin(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getAdmin()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getDelay(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getDelay()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getPendingAdmin(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getPendingAdmin()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    isActionQueued(
      actionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isActionQueued(bytes32)"(
      actionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isProposalOverGracePeriod(
      governance: string,
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isProposalOverGracePeriod(address,uint256)"(
      governance: string,
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    queueTransaction(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      executionTime: BigNumberish,
      withDelegatecall: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "queueTransaction(address,uint256,string,bytes,uint256,bool)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      executionTime: BigNumberish,
      withDelegatecall: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  "GRACE_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

  MAXIMUM_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  "MAXIMUM_DELAY()"(overrides?: CallOverrides): Promise<BigNumber>;

  MINIMUM_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  "MINIMUM_DELAY()"(overrides?: CallOverrides): Promise<BigNumber>;

  cancelTransaction(
    target: string,
    value: BigNumberish,
    signature: string,
    data: BytesLike,
    executionTime: BigNumberish,
    withDelegatecall: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelTransaction(address,uint256,string,bytes,uint256,bool)"(
    target: string,
    value: BigNumberish,
    signature: string,
    data: BytesLike,
    executionTime: BigNumberish,
    withDelegatecall: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeTransaction(
    target: string,
    value: BigNumberish,
    signature: string,
    data: BytesLike,
    executionTime: BigNumberish,
    withDelegatecall: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "executeTransaction(address,uint256,string,bytes,uint256,bool)"(
    target: string,
    value: BigNumberish,
    signature: string,
    data: BytesLike,
    executionTime: BigNumberish,
    withDelegatecall: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  getAdmin(overrides?: CallOverrides): Promise<string>;

  "getAdmin()"(overrides?: CallOverrides): Promise<string>;

  getDelay(overrides?: CallOverrides): Promise<BigNumber>;

  "getDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

  getPendingAdmin(overrides?: CallOverrides): Promise<string>;

  "getPendingAdmin()"(overrides?: CallOverrides): Promise<string>;

  isActionQueued(
    actionHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isActionQueued(bytes32)"(
    actionHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isProposalOverGracePeriod(
    governance: string,
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isProposalOverGracePeriod(address,uint256)"(
    governance: string,
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  queueTransaction(
    target: string,
    value: BigNumberish,
    signature: string,
    data: BytesLike,
    executionTime: BigNumberish,
    withDelegatecall: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "queueTransaction(address,uint256,string,bytes,uint256,bool)"(
    target: string,
    value: BigNumberish,
    signature: string,
    data: BytesLike,
    executionTime: BigNumberish,
    withDelegatecall: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    "GRACE_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAXIMUM_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    "MAXIMUM_DELAY()"(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    "MINIMUM_DELAY()"(overrides?: CallOverrides): Promise<BigNumber>;

    cancelTransaction(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      executionTime: BigNumberish,
      withDelegatecall: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "cancelTransaction(address,uint256,string,bytes,uint256,bool)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      executionTime: BigNumberish,
      withDelegatecall: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    executeTransaction(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      executionTime: BigNumberish,
      withDelegatecall: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "executeTransaction(address,uint256,string,bytes,uint256,bool)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      executionTime: BigNumberish,
      withDelegatecall: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    getAdmin(overrides?: CallOverrides): Promise<string>;

    "getAdmin()"(overrides?: CallOverrides): Promise<string>;

    getDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "getDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingAdmin(overrides?: CallOverrides): Promise<string>;

    "getPendingAdmin()"(overrides?: CallOverrides): Promise<string>;

    isActionQueued(
      actionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isActionQueued(bytes32)"(
      actionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isProposalOverGracePeriod(
      governance: string,
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isProposalOverGracePeriod(address,uint256)"(
      governance: string,
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    queueTransaction(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      executionTime: BigNumberish,
      withDelegatecall: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "queueTransaction(address,uint256,string,bytes,uint256,bool)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      executionTime: BigNumberish,
      withDelegatecall: boolean,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    CancelledAction(
      actionHash: null,
      target: string | null,
      value: null,
      signature: null,
      data: null,
      executionTime: null,
      withDelegatecall: null
    ): EventFilter;

    ExecutedAction(
      actionHash: null,
      target: string | null,
      value: null,
      signature: null,
      data: null,
      executionTime: null,
      withDelegatecall: null,
      resultData: null
    ): EventFilter;

    NewAdmin(newAdmin: null): EventFilter;

    NewDelay(delay: null): EventFilter;

    NewPendingAdmin(newPendingAdmin: null): EventFilter;

    QueuedAction(
      actionHash: null,
      target: string | null,
      value: null,
      signature: null,
      data: null,
      executionTime: null,
      withDelegatecall: null
    ): EventFilter;
  };

  estimateGas: {
    GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    "GRACE_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAXIMUM_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    "MAXIMUM_DELAY()"(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    "MINIMUM_DELAY()"(overrides?: CallOverrides): Promise<BigNumber>;

    cancelTransaction(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      executionTime: BigNumberish,
      withDelegatecall: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelTransaction(address,uint256,string,bytes,uint256,bool)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      executionTime: BigNumberish,
      withDelegatecall: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    executeTransaction(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      executionTime: BigNumberish,
      withDelegatecall: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "executeTransaction(address,uint256,string,bytes,uint256,bool)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      executionTime: BigNumberish,
      withDelegatecall: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    getAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    "getAdmin()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "getDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    "getPendingAdmin()"(overrides?: CallOverrides): Promise<BigNumber>;

    isActionQueued(
      actionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isActionQueued(bytes32)"(
      actionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isProposalOverGracePeriod(
      governance: string,
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isProposalOverGracePeriod(address,uint256)"(
      governance: string,
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queueTransaction(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      executionTime: BigNumberish,
      withDelegatecall: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "queueTransaction(address,uint256,string,bytes,uint256,bool)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      executionTime: BigNumberish,
      withDelegatecall: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    GRACE_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "GRACE_PERIOD()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAXIMUM_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAXIMUM_DELAY()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINIMUM_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MINIMUM_DELAY()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelTransaction(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      executionTime: BigNumberish,
      withDelegatecall: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelTransaction(address,uint256,string,bytes,uint256,bool)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      executionTime: BigNumberish,
      withDelegatecall: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executeTransaction(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      executionTime: BigNumberish,
      withDelegatecall: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "executeTransaction(address,uint256,string,bytes,uint256,bool)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      executionTime: BigNumberish,
      withDelegatecall: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAdmin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDelay()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPendingAdmin()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActionQueued(
      actionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isActionQueued(bytes32)"(
      actionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isProposalOverGracePeriod(
      governance: string,
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isProposalOverGracePeriod(address,uint256)"(
      governance: string,
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queueTransaction(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      executionTime: BigNumberish,
      withDelegatecall: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "queueTransaction(address,uint256,string,bytes,uint256,bool)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      executionTime: BigNumberish,
      withDelegatecall: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
