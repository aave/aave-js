/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IAaveProtoGovernanceInterface extends ethers.utils.Interface {
  functions: {
    "cancelVoteByVoter(uint256)": FunctionFragment;
    "challengeVoters(uint256,address[])": FunctionFragment;
    "newProposal(bytes32,bytes32,uint256,address,uint256,uint256,uint256)": FunctionFragment;
    "resolveProposal(uint256)": FunctionFragment;
    "submitVoteByVoter(uint256,uint256,address)": FunctionFragment;
    "tryToMoveToValidating(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelVoteByVoter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "challengeVoters",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "newProposal",
    values: [
      BytesLike,
      BytesLike,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitVoteByVoter",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tryToMoveToValidating",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelVoteByVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengeVoters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitVoteByVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryToMoveToValidating",
    data: BytesLike
  ): Result;

  events: {};
}

export class IAaveProtoGovernance extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IAaveProtoGovernanceInterface;

  functions: {
    cancelVoteByVoter(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelVoteByVoter(uint256)"(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    challengeVoters(
      _proposalId: BigNumberish,
      _voters: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "challengeVoters(uint256,address[])"(
      _proposalId: BigNumberish,
      _voters: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    newProposal(
      _proposalType: BytesLike,
      _ipfsHash: BytesLike,
      _threshold: BigNumberish,
      _proposalExecutor: string,
      _votingBlocksDuration: BigNumberish,
      _validatingBlocksDuration: BigNumberish,
      _maxMovesToVotingAllowed: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "newProposal(bytes32,bytes32,uint256,address,uint256,uint256,uint256)"(
      _proposalType: BytesLike,
      _ipfsHash: BytesLike,
      _threshold: BigNumberish,
      _proposalExecutor: string,
      _votingBlocksDuration: BigNumberish,
      _validatingBlocksDuration: BigNumberish,
      _maxMovesToVotingAllowed: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    resolveProposal(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "resolveProposal(uint256)"(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    submitVoteByVoter(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      _asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "submitVoteByVoter(uint256,uint256,address)"(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      _asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tryToMoveToValidating(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tryToMoveToValidating(uint256)"(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  cancelVoteByVoter(
    _proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelVoteByVoter(uint256)"(
    _proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  challengeVoters(
    _proposalId: BigNumberish,
    _voters: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "challengeVoters(uint256,address[])"(
    _proposalId: BigNumberish,
    _voters: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  newProposal(
    _proposalType: BytesLike,
    _ipfsHash: BytesLike,
    _threshold: BigNumberish,
    _proposalExecutor: string,
    _votingBlocksDuration: BigNumberish,
    _validatingBlocksDuration: BigNumberish,
    _maxMovesToVotingAllowed: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "newProposal(bytes32,bytes32,uint256,address,uint256,uint256,uint256)"(
    _proposalType: BytesLike,
    _ipfsHash: BytesLike,
    _threshold: BigNumberish,
    _proposalExecutor: string,
    _votingBlocksDuration: BigNumberish,
    _validatingBlocksDuration: BigNumberish,
    _maxMovesToVotingAllowed: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  resolveProposal(
    _proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "resolveProposal(uint256)"(
    _proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  submitVoteByVoter(
    _proposalId: BigNumberish,
    _vote: BigNumberish,
    _asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "submitVoteByVoter(uint256,uint256,address)"(
    _proposalId: BigNumberish,
    _vote: BigNumberish,
    _asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tryToMoveToValidating(
    _proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tryToMoveToValidating(uint256)"(
    _proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelVoteByVoter(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelVoteByVoter(uint256)"(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    challengeVoters(
      _proposalId: BigNumberish,
      _voters: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "challengeVoters(uint256,address[])"(
      _proposalId: BigNumberish,
      _voters: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    newProposal(
      _proposalType: BytesLike,
      _ipfsHash: BytesLike,
      _threshold: BigNumberish,
      _proposalExecutor: string,
      _votingBlocksDuration: BigNumberish,
      _validatingBlocksDuration: BigNumberish,
      _maxMovesToVotingAllowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "newProposal(bytes32,bytes32,uint256,address,uint256,uint256,uint256)"(
      _proposalType: BytesLike,
      _ipfsHash: BytesLike,
      _threshold: BigNumberish,
      _proposalExecutor: string,
      _votingBlocksDuration: BigNumberish,
      _validatingBlocksDuration: BigNumberish,
      _maxMovesToVotingAllowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    resolveProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "resolveProposal(uint256)"(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    submitVoteByVoter(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      _asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "submitVoteByVoter(uint256,uint256,address)"(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      _asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tryToMoveToValidating(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "tryToMoveToValidating(uint256)"(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    cancelVoteByVoter(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelVoteByVoter(uint256)"(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    challengeVoters(
      _proposalId: BigNumberish,
      _voters: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "challengeVoters(uint256,address[])"(
      _proposalId: BigNumberish,
      _voters: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    newProposal(
      _proposalType: BytesLike,
      _ipfsHash: BytesLike,
      _threshold: BigNumberish,
      _proposalExecutor: string,
      _votingBlocksDuration: BigNumberish,
      _validatingBlocksDuration: BigNumberish,
      _maxMovesToVotingAllowed: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "newProposal(bytes32,bytes32,uint256,address,uint256,uint256,uint256)"(
      _proposalType: BytesLike,
      _ipfsHash: BytesLike,
      _threshold: BigNumberish,
      _proposalExecutor: string,
      _votingBlocksDuration: BigNumberish,
      _validatingBlocksDuration: BigNumberish,
      _maxMovesToVotingAllowed: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    resolveProposal(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "resolveProposal(uint256)"(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    submitVoteByVoter(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      _asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "submitVoteByVoter(uint256,uint256,address)"(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      _asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tryToMoveToValidating(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tryToMoveToValidating(uint256)"(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelVoteByVoter(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelVoteByVoter(uint256)"(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    challengeVoters(
      _proposalId: BigNumberish,
      _voters: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "challengeVoters(uint256,address[])"(
      _proposalId: BigNumberish,
      _voters: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    newProposal(
      _proposalType: BytesLike,
      _ipfsHash: BytesLike,
      _threshold: BigNumberish,
      _proposalExecutor: string,
      _votingBlocksDuration: BigNumberish,
      _validatingBlocksDuration: BigNumberish,
      _maxMovesToVotingAllowed: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "newProposal(bytes32,bytes32,uint256,address,uint256,uint256,uint256)"(
      _proposalType: BytesLike,
      _ipfsHash: BytesLike,
      _threshold: BigNumberish,
      _proposalExecutor: string,
      _votingBlocksDuration: BigNumberish,
      _validatingBlocksDuration: BigNumberish,
      _maxMovesToVotingAllowed: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    resolveProposal(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "resolveProposal(uint256)"(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    submitVoteByVoter(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      _asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "submitVoteByVoter(uint256,uint256,address)"(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      _asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tryToMoveToValidating(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tryToMoveToValidating(uint256)"(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
